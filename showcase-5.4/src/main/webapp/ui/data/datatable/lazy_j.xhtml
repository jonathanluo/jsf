<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:p="http://primefaces.org/ui"
                template="./template.xhtml">

    <ui:define name="title">
        DataTable - <span class="subitem">Lazy (Jon modified)</span>
    </ui:define>

    <ui:define name="description">
        DataTable has built-in support to deal with huge datasets. In order to enable lazy loading, a LazyDataModel needs to be implemented
        to query the datasource when pagination, sorting, filtering or live scrolling happens. This example uses an in-memory list to mimic a real datasource like a database.
        <p><strong>In a real application, loading should be executed with the query built using the information passed to the load method.</strong></p>
    </ui:define>

    <ui:define name="implementation">
        
        <h:form id="form">
            <p:dataTable var="car" value="#{dtLazyView.lazyModel}" paginator="true" rows="10"
                         paginatorTemplate="{RowsPerPageDropdown} {FirstPageLink} {PreviousPageLink} {CurrentPageReport} {NextPageLink} {LastPageLink}"
                         rowsPerPageTemplate="5,10,15" selectionMode="single" selection="#{dtLazyView.selectedCar}" id="carTable" lazy="true">
                <f:facet name="header">
                    DataTable with Filters
                </f:facet>
                <p:ajax event="rowSelect" listener="#{dtLazyView.onRowSelect}" update=":form:carDetail" oncomplete="PF('carDialog').show()" />
                <p:column headerText="Id" sortBy="#{car.id}" filterBy="#{car.id}">
                    <h:outputText value="#{car.id}" />
                </p:column>
                <!-- value of sortBy and filterBy match outputText value-->
                <p:column headerText="Year" sortBy="#{car.year}" filterBy="#{car.year}">
                    <h:outputText value="#{car.year}" />
                </p:column>
                <p:column headerText="Year-1" sortBy="#{car.yearNEW}" filterBy="#{car.yearNEW}">
                    <h:outputText value="#{car.year}" />
                </p:column>
                <!-- below: it appears that car.yearT2, car.yearTe evaluation is ignored, it returns string right after "car."
                            as sort/filter name inside LazyCarDataModel#load method. Both fields yearT2 and yearTe don't exist
                            in Car.java, nor their property methods exist.
                -->
                <p:column headerText="Year-T2" sortBy="#{car.yearT2}" filterBy="#{car.yearTe}">
                    <h:outputText value="#{car.year}" />
                </p:column>
                <p:column headerText="Year-2" sortBy="#{yearT}" filterBy="#{yearT1}">
                      <h:outputText value="#{car.year}" />
                </p:column>
                <p:column headerText="Year-3" sortBy="yearNEW" filterBy="yearNEW">
                     <h:outputText value="#{car.year}" />
                </p:column>
                <p:column headerText="Brand" sortBy="#{car.brand}" filterBy="#{car.brand}">
                    <h:outputText value="#{car.brand}" />
                </p:column>
                <p:column headerText="Color" sortBy="#{car.color}" filterBy="#{car.color}">
                    <h:outputText value="#{car.color}" />
                </p:column>
                <p:column headerText="Color(T)" sortBy="#{car.colorT}" filterBy="#{car.colorT}">
                    <h:outputText value="#{car.color}" />
                </p:column>
            </p:dataTable>
            <br/>
            <br/>

            <p:dialog header="Car Detail" widgetVar="carDialog" modal="true" showEffect="fade" hideEffect="fade" resizable="false">
                <p:outputPanel id="carDetail" style="text-align:center;">
                    <p:panelGrid  columns="2" rendered="#{not empty dtLazyView.selectedCar}" columnClasses="label,value">
                        <f:facet name="header">
                            <p:graphicImage name="demo/images/car/#{dtLazyView.selectedCar.brand}-big.gif"/> 
                        </f:facet>
                        
                        <h:outputText value="Id:" />
                        <h:outputText value="#{dtLazyView.selectedCar.id}" />

                        <h:outputText value="Year" />
                        <h:outputText value="#{dtLazyView.selectedCar.year}" />

                        <h:outputText value="Color:" />
                        <h:outputText value="#{dtLazyView.selectedCar.color}" style="color:#{dtLazyView.selectedCar.color}"/>
                    
                        <h:outputText value="Price:" />
                        <h:outputText value="#{dtLazyView.selectedCar.price}">
                            <f:convertNumber type="currency" currencySymbol="$" />
                        </h:outputText>
                    </p:panelGrid>
                </p:outputPanel>
            </p:dialog>
        </h:form>
        
    </ui:define>

    <ui:define name="source">
        <p:tabView>
            <p:tab title="lazy.xhtml">
                <pre name="code" class="brush:xml">
                </pre>
            </p:tab>

            <p:tab title="LazyView.java">
                <pre name="code" class="brush:java">

                </pre>
            </p:tab>
            
            <p:tab title="CarService.java">
                <pre name="code" class="brush:java">
                </pre>
            </p:tab>
            
            <p:tab title="LazyCarDataModel.java">
                <pre name="code" class="brush:java">
                </pre>
            </p:tab>
            
            <p:tab title="LazySorter.java">
                <pre name="code" class="brush:java">
                </pre>
            </p:tab>
            
            <p:tab title="Documentation" titleStyleClass="tab-doc docslide-151" />
        </p:tabView>

    </ui:define>

</ui:composition>